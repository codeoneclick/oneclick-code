struct fragment
{
	float4 position    : POSITION;
	float2 texcoord_01 : TEXCOORD0;
	float3 colorYxy    : TEXCOORD1;
};

struct pixel
{
	float4 color : COLOR;
};

uniform sampler2D Texture_01;


float3 convertColor (float3 colorYxy)
{
	float3	clrYxy = float3( colorYxy );
	float colorExp	= 25.0f;											// now rescale Y component
	clrYxy [0] = 1.0 - exp ( -clrYxy [0] / colorExp );

	float	ratio    = clrYxy [0] / clrYxy [2];		// Y / y = X + Y + Z
	float3	XYZ;

	XYZ.x = clrYxy [1] * ratio;						// X = x * ratio
	XYZ.y = clrYxy [0];								// Y = Y
	XYZ.z = ratio - XYZ.x - XYZ.y;					// Z = ratio - X - Y

	float3	rCoeffs = float3 ( 3.240479, -1.53715, -0.49853  );
	float3	gCoeffs = float3 ( -0.969256, 1.875991, 0.041556 );
	float3	bCoeffs = float3 ( 0.055684, -0.204043, 1.057311 );

	return	float3 ( dot ( rCoeffs, XYZ ), dot ( gCoeffs, XYZ ), dot ( bCoeffs, XYZ ) );
}

pixel main( fragment IN)
{
    pixel OUT;
    OUT.color = float4( clamp ( convertColor (IN.colorYxy), 0.0, 1.0 ), 1.0 );
    return OUT;
}
