struct fragment
{
	float4 vPosition        : POSITION;
	float2 vTexCoord        : TEXCOORD0;
	float3 vCamera          : TEXCOORD1;
	float  fClipHeight      : TEXCOORD2;
	float4 vLight_01        : TEXCOORD3;
	float4 vLight_02        : TEXCOORD4;
	float4 vLight_03        : TEXCOORD5;
};

struct pixel
{
	float4 color : COLOR;
};

uniform sampler2D Texture_01;
uniform sampler2D Texture_02;
uniform float2 vClip;

uniform float3    vLightColor_01;
uniform float3    vLightColor_02;
uniform float3    vLightColor_03;

pixel main(fragment IN)
{
	pixel OUT;
	
    IN.vCamera = normalize(IN.vCamera);
    IN.vLight_01 = normalize(IN.vLight_01);
    IN.vLight_02 = normalize(IN.vLight_02);
    IN.vLight_03 = normalize(IN.vLight_03);
    float fHeightPower = 0.0f;
    float2 vDisplaceTexCoord = IN.vTexCoord;
    for(int i = 0; i < 8; i++)
    {
		 fHeightPower = tex2D(Texture_02, vDisplaceTexCoord).a;
		 fHeightPower *= 0.08f/8.0f;
		 vDisplaceTexCoord = vDisplaceTexCoord + (-IN.vCamera.xy * fHeightPower);
    }
   
    float3 vNormalColor = tex2D(Texture_02, vDisplaceTexCoord).rgb;
	vNormalColor = vNormalColor * 2.0f - 1.0f;
	
	float4 vDiffuceColor = tex2D( Texture_01, vDisplaceTexCoord );
	
	float fDiffuse_01 = dot(vNormalColor, IN.vLight_01.xyz);
	float fDiffuse_02 = dot(vNormalColor, IN.vLight_02.xyz);
	float fDiffuse_03 = dot(vNormalColor, IN.vLight_03.xyz);
	
	float fShadow_01 = 4.0 * IN.vLight_01.z;
	float fShadow_02 = 4.0 * IN.vLight_02.z;
	float fShadow_03 = 4.0 * IN.vLight_03.z;
   
	float3 vReflection_01 = normalize(2 * fDiffuse_01 * vNormalColor - IN.vLight_01.xyz);  
	float3 vReflection_02 = normalize(2 * fDiffuse_02 * vNormalColor - IN.vLight_02.xyz);  
	float3 vReflection_03 = normalize(2 * fDiffuse_03 * vNormalColor - IN.vLight_03.xyz);  

	float fSpecular_01 = min(pow(dot(vReflection_01, IN.vCamera), 3), 128.0f);
	float fSpecular_02 = min(pow(dot(vReflection_02, IN.vCamera), 3), 128.0f);
	float fSpecular_03 = min(pow(dot(vReflection_03, IN.vCamera), 3), 128.0f);

	float3 vOutColor_01 = fShadow_01*(vDiffuceColor.rgb * fDiffuse_01  * vLightColor_01 + fSpecular_01*vLightColor_01);
	float3 vOutColor_02 = fShadow_02*(vDiffuceColor.rgb * fDiffuse_02  * vLightColor_02 + fSpecular_02*vLightColor_02);
	float3 vOutColor_03 = fShadow_03*(vDiffuceColor.rgb * fDiffuse_03  * vLightColor_03 + fSpecular_03*vLightColor_03);
	
	OUT.color.rgb = 0.1f * vDiffuceColor.rgb + vOutColor_01 + vOutColor_02 + vOutColor_03; 

	return OUT;
}
