struct fragment
{
	float4 vPosition        : POSITION;
	float2 vTexCoord        : TEXCOORD0;
	float4 vLight           : TEXCOORD1;
	float3 vCamera          : TEXCOORD2;
	float  fClipHeight      : TEXCOORD3;
};

struct pixel
{
	float4 color : COLOR;
};

uniform sampler2D Texture_01;
uniform sampler2D Texture_02;
uniform float fClipHeigth = 0.0f;
uniform float bClipInc = 0.0f;

pixel main(fragment IN)
{
	pixel OUT;
	
	if((bClipInc > 0.0f) && (IN.fClipHeight > fClipHeigth))
	{
		discard(true);
	}
	
	if((bClipInc < 0.0f) && (IN.fClipHeight < fClipHeigth))
	{
		discard(true);
	}
	
    IN.vCamera = normalize(IN.vCamera);
    IN.vLight = normalize(IN.vLight);
    float fHeightPower = tex2D(Texture_02, IN.vTexCoord).a;
    fHeightPower *= 0.04f;
    float2 vDisplaceTexCoord = IN.vTexCoord + (-IN.vCamera.xy * fHeightPower);
    float3 vNormalColor = tex2D(Texture_02, vDisplaceTexCoord).rgb;
	vNormalColor = vNormalColor * 2.0f - 1.0f;
	
	float4 vDiffuceColor = tex2D( Texture_01, vDisplaceTexCoord );
	float fDiffuse = saturate(dot(vNormalColor,IN.vLight)) * IN.vLight.w;
	float3 vReflection = normalize(2.0f * fDiffuse * vNormalColor - IN.vLight);
	float4 vSpecularColor = float4(pow(saturate(dot(vReflection, IN.vCamera)), 128.0f));
	float4 vAmbientColor = vDiffuceColor * 0.5f;

	OUT.color = vDiffuceColor * fDiffuse + vAmbientColor + vSpecularColor;
	return OUT;
}
